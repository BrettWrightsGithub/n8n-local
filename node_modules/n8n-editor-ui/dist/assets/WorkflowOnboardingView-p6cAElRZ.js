import { d as defineComponent, aD as useLoadingService, aN as useTemplatesStore, T as useWorkflowsStore, b as useRouter, U as useRoute, o as onMounted, V as VIEWS, c as openBlock, h as createElementBlock, hK as SAMPLE_SUBWORKFLOW_WORKFLOW, hL as NEW_SAMPLE_WORKFLOW_CREATED_CHANNEL, g as useI18n } from "./index-CWcTt6jd.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "WorkflowOnboardingView",
  setup(__props) {
    const loadingService = useLoadingService();
    const templateStore = useTemplatesStore();
    const workflowsStore = useWorkflowsStore();
    const router = useRouter();
    const route = useRoute();
    const i18n = useI18n();
    const openWorkflowTemplate = async (templateId) => {
      if (templateId === SAMPLE_SUBWORKFLOW_WORKFLOW.meta.templateId) {
        await openSampleSubworkflow();
        return;
      }
      try {
        loadingService.startLoading();
        const template = await templateStore.getFixedWorkflowTemplate(templateId);
        if (!template) {
          throw new Error();
        }
        const name = i18n.baseText("onboarding.title", {
          interpolate: { name: template.name }
        });
        const workflow = await workflowsStore.createNewWorkflow({
          name,
          connections: template.workflow.connections,
          nodes: template.workflow.nodes.map(workflowsStore.convertTemplateNodeToNodeUi),
          pinData: template.workflow.pinData,
          settings: template.workflow.settings,
          meta: {
            onboardingId: templateId
          }
        });
        await router.replace({
          name: VIEWS.WORKFLOW,
          params: { name: workflow.id },
          query: { onboardingId: templateId }
        });
        loadingService.stopLoading();
      } catch (e) {
        await router.replace({ name: VIEWS.NEW_WORKFLOW });
        loadingService.stopLoading();
        throw new Error(`Could not load onboarding template ${templateId}`);
      }
    };
    const openSampleSubworkflow = async () => {
      try {
        loadingService.startLoading();
        const projectId = route.query?.projectId;
        const sampleSubWorkflows = Number(route.query?.sampleSubWorkflows ?? 0);
        const workflowName = `${SAMPLE_SUBWORKFLOW_WORKFLOW.name} ${sampleSubWorkflows + 1}`;
        const workflow = {
          ...SAMPLE_SUBWORKFLOW_WORKFLOW,
          name: workflowName
        };
        if (projectId) {
          workflow.projectId = projectId;
        }
        const newWorkflow = await workflowsStore.createNewWorkflow(workflow);
        const sampleSubworkflowChannel = new BroadcastChannel(NEW_SAMPLE_WORKFLOW_CREATED_CHANNEL);
        sampleSubworkflowChannel.postMessage({ workflowId: newWorkflow.id });
        await router.replace({
          name: VIEWS.WORKFLOW,
          params: { name: newWorkflow.id }
        });
        loadingService.stopLoading();
      } catch (e) {
        await router.replace({ name: VIEWS.NEW_WORKFLOW });
        loadingService.stopLoading();
      }
    };
    onMounted(async () => {
      const templateId = route.params.id;
      if (!templateId || typeof templateId !== "string") {
        await router.replace({ name: VIEWS.NEW_WORKFLOW });
        return;
      }
      await openWorkflowTemplate(templateId);
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div");
    };
  }
});
export {
  _sfc_main as default
};
