import { f as useCanvasOperations, d as useVueFlow, e as useCanvasMapping, _ as __unplugin_components_0 } from "./useCanvasOperations-DTx4vbp_.js";
import { d as defineComponent, T as useWorkflowsStore, bp as useNodeTypesStore, U as useRoute, b as useRouter, r as ref, q as computed, o as onMounted, c as openBlock, h as createElementBlock, e as createBlock, n as normalizeClass, f as createCommentVNode, i as createVNode, w as withCtx, j as createBaseVNode, k as createTextVNode, t as toDisplayString, l as unref, aQ as N8nTooltip, g as useI18n, C as createEventBus, aa as useCssModule, m as resolveComponent, _ as _export_sfc, hM as useTestDefinitionStore, F as Fragment, s as renderSlot, ay as withDirectives, az as vShow, hN as ElCollapseTransition, y as nextTick, A as renderList, hG as _sfc_main$9, hO as __unplugin_components_0$1, J as useDebounce, a as useToast, hE as useAnnotationTagsStore, K as useUIStore, V as VIEWS, H as watch, hP as TestRunsTable, hQ as NODE_PINNING_MODAL_KEY, hR as Modal, hS as __unplugin_components_0$2 } from "./index-CWcTt6jd.js";
import "./useBugReporting-BxDqzvRW.js";
import "./usePinnedData-C5NRkSpx.js";
const _sfc_main$8 = /* @__PURE__ */ defineComponent({
  __name: "NodesPinning",
  props: {
    modelValue: {}
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: __emit }) {
    const workflowsStore = useWorkflowsStore();
    const nodeTypesStore = useNodeTypesStore();
    const route = useRoute();
    const router = useRouter();
    const locale = useI18n();
    const { resetWorkspace, initializeWorkspace } = useCanvasOperations({ router });
    const eventBus = createEventBus();
    const style = useCssModule();
    const uuid = crypto.randomUUID();
    const props = __props;
    const emit = __emit;
    const isLoading = ref(true);
    const workflowId = computed(() => route.params.name);
    const testId = computed(() => route.params.testId);
    const workflow = computed(() => workflowsStore.getWorkflowById(workflowId.value));
    const workflowObject = computed(() => workflowsStore.getCurrentWorkflow(true));
    const canvasId = computed(() => `${uuid}-${testId.value}`);
    const { onNodesInitialized, fitView, zoomTo } = useVueFlow({ id: canvasId.value });
    const nodes = computed(() => {
      return workflow.value.nodes ?? [];
    });
    const connections = computed(() => workflow.value.connections);
    const { nodes: mappedNodes, connections: mappedConnections } = useCanvasMapping({
      nodes,
      connections,
      workflowObject
    });
    async function loadData() {
      workflowsStore.resetState();
      resetWorkspace();
      const loadingPromise = Promise.all([
        nodeTypesStore.getNodeTypes(),
        workflowsStore.fetchWorkflow(workflowId.value)
      ]);
      await loadingPromise;
      initializeWorkspace(workflow.value);
      disableAllNodes();
    }
    function getNodeNameById(id) {
      return mappedNodes.value.find((node) => node.id === id)?.data?.name;
    }
    function updateNodeClasses(nodeIds, isPinned) {
      eventBus.emit("nodes:action", {
        ids: nodeIds,
        action: "update:node:class",
        payload: {
          className: style.pinnedNode,
          add: isPinned
        }
      });
      eventBus.emit("nodes:action", {
        ids: nodeIds,
        action: "update:node:class",
        payload: {
          className: style.notPinnedNode,
          add: !isPinned
        }
      });
    }
    function disableAllNodes() {
      const ids = mappedNodes.value.map((node) => node.id);
      updateNodeClasses(ids, false);
      const pinnedNodes = props.modelValue.map((node) => node.id).filter((id) => id !== null);
      if (pinnedNodes.length > 0) {
        updateNodeClasses(pinnedNodes, true);
      }
    }
    function onPinButtonClick(data) {
      const nodeName = getNodeNameById(data.id);
      if (!nodeName) return;
      const isPinned = props.modelValue.some((node) => node.id === data.id);
      const updatedNodes = isPinned ? props.modelValue.filter((node) => node.id !== data.id) : [...props.modelValue, { name: nodeName, id: data.id }];
      emit("update:modelValue", updatedNodes);
      updateNodeClasses([data.id], !isPinned);
    }
    function isPinButtonVisible(outputs) {
      return outputs.length === 1;
    }
    onNodesInitialized(async () => {
      await fitView();
      isLoading.value = false;
      await zoomTo(0.7, { duration: 400 });
    });
    onMounted(loadData);
    return (_ctx, _cache) => {
      const _component_N8nSpinner = resolveComponent("N8nSpinner");
      const _component_n8n_icon_button = resolveComponent("n8n-icon-button");
      const _component_Canvas = __unplugin_components_0;
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.container)
      }, [
        isLoading.value ? (openBlock(), createBlock(_component_N8nSpinner, {
          key: 0,
          size: "xlarge",
          type: "dots",
          class: normalizeClass(_ctx.$style.spinner)
        }, null, 8, ["class"])) : createCommentVNode("", true),
        createVNode(_component_Canvas, {
          id: canvasId.value,
          loading: isLoading.value,
          class: normalizeClass({ [_ctx.$style.canvas]: true }),
          nodes: unref(mappedNodes),
          connections: unref(mappedConnections),
          "show-bug-reporting-button": false,
          "read-only": true,
          "event-bus": unref(eventBus)
        }, {
          nodeToolbar: withCtx(({ data, outputs }) => [
            createBaseVNode("div", {
              class: normalizeClass(_ctx.$style.pinButtonContainer)
            }, [
              isPinButtonVisible(outputs) ? (openBlock(), createBlock(unref(N8nTooltip), {
                key: 0,
                placement: "left"
              }, {
                content: withCtx(() => [
                  createTextVNode(toDisplayString(unref(locale).baseText("testDefinition.edit.nodesPinning.pinButtonTooltip")), 1)
                ]),
                default: withCtx(() => [
                  createVNode(_component_n8n_icon_button, {
                    type: "tertiary",
                    size: "large",
                    icon: "thumbtack",
                    class: normalizeClass(_ctx.$style.pinButton),
                    "data-test-id": "node-pin-button",
                    onClick: ($event) => onPinButtonClick(data)
                  }, null, 8, ["class", "onClick"])
                ]),
                _: 2
              }, 1024)) : createCommentVNode("", true)
            ], 2)
          ]),
          _: 1
        }, 8, ["id", "loading", "class", "nodes", "connections", "event-bus"])
      ], 2);
    };
  }
});
const container$1 = "_container_1ogu0_123";
const pinButtonContainer = "_pinButtonContainer_1ogu0_128";
const pinButton = "_pinButton_1ogu0_128";
const notPinnedNode = "_notPinnedNode_1ogu0_142";
const pinnedNode = "_pinnedNode_1ogu0_143";
const spinner = "_spinner_1ogu0_154";
const style0$7 = {
  container: container$1,
  pinButtonContainer,
  pinButton,
  notPinnedNode,
  pinnedNode,
  spinner
};
const cssModules$7 = {
  "$style": style0$7
};
const __unplugin_components_2 = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["__cssModules", cssModules$7]]);
const arrowConnector = "_arrowConnector_1mi41_123";
const style0$6 = {
  arrowConnector
};
const _sfc_main$7 = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.$style.arrowConnector)
  }, null, 2);
}
const cssModules$6 = {
  "$style": style0$6
};
const __unplugin_components_1 = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render], ["__cssModules", cssModules$6]]);
function useTestDefinitionForm() {
  const evaluationsStore = useTestDefinitionStore();
  const state = ref({
    name: {
      value: `My Test ${evaluationsStore.allTestDefinitions.length + 1}`,
      tempValue: "",
      isEditing: false
    },
    tags: {
      value: [],
      tempValue: [],
      isEditing: false
    },
    description: {
      value: "",
      tempValue: "",
      isEditing: false
    },
    evaluationWorkflow: {
      mode: "list",
      value: "",
      __rl: true
    },
    metrics: [],
    mockedNodes: []
  });
  const isSaving = ref(false);
  const fieldsIssues = ref([]);
  const fields = ref({});
  const editableFields = computed(() => ({
    name: state.value.name,
    tags: state.value.tags,
    description: state.value.description
  }));
  const loadTestData = async (testId) => {
    try {
      await evaluationsStore.fetchAll({ force: true });
      const testDefinition = evaluationsStore.testDefinitionsById[testId];
      if (testDefinition) {
        const metrics = await evaluationsStore.fetchMetrics(testId);
        state.value.description = {
          value: testDefinition.description ?? "",
          isEditing: false,
          tempValue: ""
        };
        state.value.name = {
          value: testDefinition.name ?? "",
          isEditing: false,
          tempValue: ""
        };
        state.value.tags = {
          isEditing: false,
          value: testDefinition.annotationTagId ? [testDefinition.annotationTagId] : [],
          tempValue: []
        };
        state.value.evaluationWorkflow = {
          mode: "list",
          value: testDefinition.evaluationWorkflowId ?? "",
          __rl: true
        };
        state.value.metrics = metrics;
        state.value.mockedNodes = testDefinition.mockedNodes ?? [];
      }
    } catch (error) {
      console.error("Failed to load test data", error);
    }
  };
  const createTest = async (workflowId) => {
    if (isSaving.value) return;
    isSaving.value = true;
    fieldsIssues.value = [];
    try {
      const params = {
        name: state.value.name.value,
        workflowId,
        description: state.value.description.value
      };
      return await evaluationsStore.create(params);
    } finally {
      isSaving.value = false;
    }
  };
  const deleteMetric = async (metricId, testId) => {
    await evaluationsStore.deleteMetric({ id: metricId, testDefinitionId: testId });
    state.value.metrics = state.value.metrics.filter((metric) => metric.id !== metricId);
  };
  const updateMetrics = async (testId) => {
    const promises = state.value.metrics.map(async (metric) => {
      if (!metric.name) return;
      if (!metric.id) {
        const createdMetric = await evaluationsStore.createMetric({
          name: metric.name,
          testDefinitionId: testId
        });
        metric.id = createdMetric.id;
      } else {
        await evaluationsStore.updateMetric({
          name: metric.name,
          id: metric.id,
          testDefinitionId: testId
        });
      }
    });
    isSaving.value = true;
    await Promise.all(promises);
    isSaving.value = false;
  };
  const updateTest = async (testId) => {
    if (isSaving.value) return;
    isSaving.value = true;
    fieldsIssues.value = [];
    try {
      if (!testId) {
        throw new Error("Test ID is required for updating a test");
      }
      const params = {
        name: state.value.name.value,
        description: state.value.description.value
      };
      if (state.value.evaluationWorkflow.value) {
        params.evaluationWorkflowId = state.value.evaluationWorkflow.value.toString();
      }
      const annotationTagId = state.value.tags.value[0];
      if (annotationTagId) {
        params.annotationTagId = annotationTagId;
      }
      if (state.value.mockedNodes.length > 0) {
        params.mockedNodes = state.value.mockedNodes;
      }
      const response = await evaluationsStore.update({ ...params, id: testId });
      return response;
    } finally {
      isSaving.value = false;
    }
  };
  function startEditing(field) {
    const fieldObj = editableFields.value[field];
    if (fieldObj.isEditing) {
      return;
    }
    if (Array.isArray(fieldObj.value)) {
      fieldObj.tempValue = [...fieldObj.value];
    } else {
      fieldObj.tempValue = fieldObj.value;
    }
    fieldObj.isEditing = true;
  }
  function saveChanges(field) {
    const fieldObj = editableFields.value[field];
    fieldObj.value = Array.isArray(fieldObj.tempValue) ? [...fieldObj.tempValue] : fieldObj.tempValue;
    fieldObj.isEditing = false;
  }
  function cancelEditing(field) {
    const fieldObj = editableFields.value[field];
    if (Array.isArray(fieldObj.value)) {
      fieldObj.tempValue = [...fieldObj.value];
    } else {
      fieldObj.tempValue = fieldObj.value;
    }
    fieldObj.isEditing = false;
  }
  function handleKeydown(event, field) {
    if (event.key === "Escape") {
      cancelEditing(field);
    } else if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      saveChanges(field);
    }
  }
  return {
    state,
    fields,
    isSaving: computed(() => isSaving.value),
    fieldsIssues: computed(() => fieldsIssues.value),
    deleteMetric,
    updateMetrics,
    loadTestData,
    createTest,
    updateTest,
    startEditing,
    saveChanges,
    cancelEditing,
    handleKeydown
  };
}
const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  __name: "EvaluationHeader",
  props: {
    modelValue: {},
    startEditing: { type: Function },
    saveChanges: { type: Function },
    handleKeydown: { type: Function }
  },
  emits: ["update:modelValue"],
  setup(__props) {
    const locale = useI18n();
    return (_ctx, _cache) => {
      const _component_n8n_icon_button = resolveComponent("n8n-icon-button");
      const _component_N8nInput = resolveComponent("N8nInput");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.header)
      }, [
        createVNode(_component_n8n_icon_button, {
          class: normalizeClass(_ctx.$style.backButton),
          icon: "arrow-left",
          type: "tertiary",
          title: unref(locale).baseText("testDefinition.edit.backButtonTitle"),
          onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$router.back())
        }, null, 8, ["class", "title"]),
        createBaseVNode("h2", {
          class: normalizeClass(_ctx.$style.title)
        }, [
          !_ctx.modelValue.isEditing ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createBaseVNode("span", {
              class: normalizeClass(_ctx.$style.titleText)
            }, toDisplayString(_ctx.modelValue.value), 3),
            createVNode(_component_n8n_icon_button, {
              class: normalizeClass(_ctx.$style.editInputButton),
              icon: "pen",
              type: "tertiary",
              onClick: _cache[1] || (_cache[1] = ($event) => _ctx.startEditing("name"))
            }, null, 8, ["class"])
          ], 64)) : (openBlock(), createBlock(_component_N8nInput, {
            key: 1,
            ref: "nameInput",
            "data-test-id": "evaluation-name-input",
            "model-value": _ctx.modelValue.tempValue,
            type: "text",
            placeholder: unref(locale).baseText("testDefinition.edit.namePlaceholder"),
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.$emit("update:modelValue", { ..._ctx.modelValue, tempValue: $event })),
            onBlur: _cache[3] || (_cache[3] = () => _ctx.saveChanges("name")),
            onKeydown: _cache[4] || (_cache[4] = (e) => _ctx.handleKeydown(e, "name"))
          }, null, 8, ["model-value", "placeholder"]))
        ], 2)
      ], 2);
    };
  }
});
const header$1 = "_header_qmfly_123";
const editInputButton$2 = "_editInputButton_qmfly_127";
const title$1 = "_title_qmfly_131";
const titleText = "_titleText_qmfly_142";
const backButton = "_backButton_qmfly_155";
const style0$5 = {
  header: header$1,
  editInputButton: editInputButton$2,
  title: title$1,
  titleText,
  backButton
};
const cssModules$5 = {
  "$style": style0$5
};
const EvaluationHeader = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["__cssModules", cssModules$5]]);
const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  __name: "DescriptionInput",
  props: {
    modelValue: {},
    startEditing: { type: Function },
    saveChanges: { type: Function },
    handleKeydown: { type: Function }
  },
  emits: ["update:modelValue"],
  setup(__props) {
    const locale = useI18n();
    return (_ctx, _cache) => {
      const _component_n8n_icon = resolveComponent("n8n-icon");
      const _component_N8nText = resolveComponent("N8nText");
      const _component_n8n_icon_button = resolveComponent("n8n-icon-button");
      const _component_N8nInput = resolveComponent("N8nInput");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.description)
      }, [
        !_ctx.modelValue.isEditing ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createBaseVNode("span", {
            class: normalizeClass(_ctx.$style.descriptionText),
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.startEditing("description"))
          }, [
            _ctx.modelValue.value.length === 0 ? (openBlock(), createBlock(_component_n8n_icon, {
              key: 0,
              class: normalizeClass(_ctx.$style.icon),
              icon: "plus",
              color: "text-light",
              size: "medium"
            }, null, 8, ["class"])) : createCommentVNode("", true),
            createVNode(_component_N8nText, { size: "medium" }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.modelValue.value.length > 0 ? _ctx.modelValue.value : "Add a description"), 1)
              ]),
              _: 1
            })
          ], 2),
          createVNode(_component_n8n_icon_button, {
            class: normalizeClass(_ctx.$style.editInputButton),
            icon: "pen",
            type: "tertiary",
            onClick: _cache[1] || (_cache[1] = ($event) => _ctx.startEditing("description"))
          }, null, 8, ["class"])
        ], 64)) : (openBlock(), createBlock(_component_N8nInput, {
          key: 1,
          ref: "descriptionInput",
          "data-test-id": "evaluation-description-input",
          "model-value": _ctx.modelValue.tempValue,
          type: "textarea",
          placeholder: unref(locale).baseText("testDefinition.edit.descriptionPlaceholder"),
          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.$emit("update:modelValue", { ..._ctx.modelValue, tempValue: $event })),
          onBlur: _cache[3] || (_cache[3] = () => _ctx.saveChanges("description")),
          onKeydown: _cache[4] || (_cache[4] = (e) => _ctx.handleKeydown(e, "description"))
        }, null, 8, ["model-value", "placeholder"]))
      ], 2);
    };
  }
});
const description$1 = "_description_f14k1_123";
const editInputButton$1 = "_editInputButton_f14k1_129";
const descriptionText = "_descriptionText_f14k1_133";
const icon$1 = "_icon_f14k1_139";
const style0$4 = {
  description: description$1,
  editInputButton: editInputButton$1,
  descriptionText,
  icon: icon$1
};
const cssModules$4 = {
  "$style": style0$4
};
const DescriptionInput = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["__cssModules", cssModules$4]]);
const _hoisted_1$1 = ["aria-expanded", "aria-controls"];
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  __name: "EvaluationStep",
  props: {
    title: {},
    warning: { type: Boolean, default: false },
    small: { type: Boolean, default: false },
    expanded: { type: Boolean, default: true },
    description: { default: "" }
  },
  setup(__props) {
    const props = __props;
    const locale = useI18n();
    const isExpanded = ref(props.expanded);
    const contentRef = ref(null);
    const containerRef = ref(null);
    const toggleExpand = async () => {
      isExpanded.value = !isExpanded.value;
      if (isExpanded.value) {
        await nextTick();
        if (containerRef.value) {
          containerRef.value.style.height = "auto";
        }
      }
    };
    return (_ctx, _cache) => {
      const _component_font_awesome_icon = resolveComponent("font-awesome-icon");
      return openBlock(), createElementBlock("div", {
        ref_key: "containerRef",
        ref: containerRef,
        class: normalizeClass([_ctx.$style.evaluationStep, _ctx.small && _ctx.$style.small]),
        "data-test-id": "evaluation-step"
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.content)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(_ctx.$style.header)
          }, [
            createBaseVNode("div", {
              class: normalizeClass([_ctx.$style.icon, _ctx.warning && _ctx.$style.warning])
            }, [
              renderSlot(_ctx.$slots, "icon")
            ], 2),
            createBaseVNode("h3", {
              class: normalizeClass(_ctx.$style.title)
            }, toDisplayString(_ctx.title), 3),
            _ctx.warning ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: normalizeClass(_ctx.$style.warningIcon)
            }, "⚠", 2)) : createCommentVNode("", true),
            _ctx.$slots.cardContent ? (openBlock(), createElementBlock("button", {
              key: 1,
              class: normalizeClass(_ctx.$style.collapseButton),
              "aria-expanded": isExpanded.value,
              "aria-controls": "content-" + _ctx.title.replace(/\s+/g, "-"),
              "data-test-id": "evaluation-step-collapse-button",
              onClick: toggleExpand
            }, [
              createTextVNode(toDisplayString(isExpanded.value ? unref(locale).baseText("testDefinition.edit.step.collapse") : unref(locale).baseText("testDefinition.edit.step.expand")) + " ", 1),
              createVNode(_component_font_awesome_icon, {
                icon: isExpanded.value ? "angle-down" : "angle-right",
                size: "lg"
              }, null, 8, ["icon"])
            ], 10, _hoisted_1$1)) : createCommentVNode("", true)
          ], 2),
          _ctx.description ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(_ctx.$style.description)
          }, toDisplayString(_ctx.description), 3)) : createCommentVNode("", true),
          _ctx.$slots.cardContent ? (openBlock(), createBlock(unref(ElCollapseTransition), { key: 1 }, {
            default: withCtx(() => [
              withDirectives(createBaseVNode("div", {
                class: normalizeClass(_ctx.$style.cardContentWrapper)
              }, [
                createBaseVNode("div", {
                  ref_key: "contentRef",
                  ref: contentRef,
                  class: normalizeClass(_ctx.$style.cardContent),
                  "data-test-id": "evaluation-step-content"
                }, [
                  renderSlot(_ctx.$slots, "cardContent")
                ], 2)
              ], 2), [
                [vShow, isExpanded.value]
              ])
            ]),
            _: 3
          })) : createCommentVNode("", true)
        ], 2)
      ], 2);
    };
  }
});
const evaluationStep = "_evaluationStep_65xdl_123";
const small = "_small_65xdl_135";
const icon = "_icon_65xdl_140";
const warning = "_warning_65xdl_149";
const content$1 = "_content_65xdl_153";
const header = "_header_65xdl_158";
const title = "_title_65xdl_164";
const warningIcon = "_warningIcon_65xdl_170";
const cardContent = "_cardContent_65xdl_174";
const collapseButton = "_collapseButton_65xdl_179";
const cardContentWrapper = "_cardContentWrapper_65xdl_192";
const description = "_description_65xdl_196";
const style0$3 = {
  evaluationStep,
  small,
  icon,
  warning,
  content: content$1,
  header,
  title,
  warningIcon,
  cardContent,
  collapseButton,
  cardContentWrapper,
  description
};
const cssModules$3 = {
  "$style": style0$3
};
const EvaluationStep = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__cssModules", cssModules$3]]);
const _hoisted_1 = { "data-test-id": "workflow-tags-field" };
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "TagsInput",
  props: {
    modelValue: { default: () => ({
      isEditing: false,
      value: [],
      tempValue: []
    }) },
    allTags: {},
    tagsById: {},
    isLoading: { type: Boolean },
    startEditing: {},
    saveChanges: {},
    cancelEditing: {},
    createTag: { type: Function, default: void 0 }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const locale = useI18n();
    const tagsEventBus = createEventBus();
    const getTagName = computed(() => (tagId) => {
      return props.tagsById[tagId]?.name ?? "";
    });
    function updateTags(tags) {
      emit("update:modelValue", {
        ...props.modelValue,
        tempValue: tags
      });
    }
    return (_ctx, _cache) => {
      const _component_n8n_text = resolveComponent("n8n-text");
      const _component_n8n_tag = resolveComponent("n8n-tag");
      const _component_n8n_icon_button = resolveComponent("n8n-icon-button");
      const _component_TagsDropdown = _sfc_main$9;
      const _component_n8n_input_label = resolveComponent("n8n-input-label");
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(_component_n8n_input_label, {
          label: unref(locale).baseText("testDefinition.edit.tagName"),
          bold: false,
          size: "small"
        }, {
          default: withCtx(() => [
            !_ctx.modelValue.isEditing ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.$style.tagsRead),
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.startEditing("tags"))
            }, [
              _ctx.modelValue.value.length === 0 ? (openBlock(), createBlock(_component_n8n_text, {
                key: 0,
                size: "small"
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(unref(locale).baseText("testDefinition.edit.selectTag")), 1)
                ]),
                _: 1
              })) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.modelValue.value, (tagId) => {
                return openBlock(), createBlock(_component_n8n_tag, {
                  key: tagId,
                  text: getTagName.value(tagId),
                  "data-test-id": "evaluation-tag-field"
                }, null, 8, ["text"]);
              }), 128)),
              createVNode(_component_n8n_icon_button, {
                class: normalizeClass(_ctx.$style.editInputButton),
                icon: "pen",
                type: "tertiary",
                size: "small",
                transparent: ""
              }, null, 8, ["class"])
            ], 2)) : (openBlock(), createBlock(_component_TagsDropdown, {
              key: 1,
              "model-value": _ctx.modelValue.tempValue,
              placeholder: unref(locale).baseText("executionAnnotationView.chooseOrCreateATag"),
              "create-enabled": _ctx.modelValue.tempValue.length === 0,
              "all-tags": _ctx.allTags,
              "is-loading": _ctx.isLoading,
              "tags-by-id": _ctx.tagsById,
              "data-test-id": "workflow-tags-dropdown",
              "event-bus": unref(tagsEventBus),
              "create-tag": _ctx.createTag,
              "manage-enabled": false,
              "multiple-limit": 1,
              "onUpdate:modelValue": updateTags,
              onEsc: _cache[1] || (_cache[1] = ($event) => _ctx.cancelEditing("tags")),
              onBlur: _cache[2] || (_cache[2] = ($event) => _ctx.saveChanges("tags"))
            }, null, 8, ["model-value", "placeholder", "create-enabled", "all-tags", "is-loading", "tags-by-id", "event-bus", "create-tag"]))
          ]),
          _: 1
        }, 8, ["label"])
      ]);
    };
  }
});
const tagsRead = "_tagsRead_z5pm4_123";
const editInputButton = "_editInputButton_z5pm4_123";
const style0$2 = {
  tagsRead,
  editInputButton
};
const cssModules$2 = {
  "$style": style0$2
};
const TagsInput = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__cssModules", cssModules$2]]);
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "WorkflowSelector",
  props: {
    modelValue: { default: () => ({
      mode: "id",
      value: "",
      __rl: true
    }) }
  },
  emits: ["update:modelValue"],
  setup(__props) {
    const locale = useI18n();
    return (_ctx, _cache) => {
      const _component_WorkflowSelectorParameterInput = __unplugin_components_0$1;
      const _component_n8n_input_label = resolveComponent("n8n-input-label");
      return openBlock(), createElementBlock("div", null, [
        createVNode(_component_n8n_input_label, {
          label: unref(locale).baseText("testDefinition.edit.workflowSelectorLabel"),
          bold: false
        }, {
          default: withCtx(() => [
            createVNode(_component_WorkflowSelectorParameterInput, {
              ref: "workflowInput",
              parameter: {
                displayName: unref(locale).baseText("testDefinition.edit.workflowSelectorDisplayName"),
                name: "workflowId",
                type: "workflowSelector",
                default: ""
              },
              "model-value": _ctx.modelValue,
              "display-title": unref(locale).baseText("testDefinition.edit.workflowSelectorTitle"),
              "is-value-expression": false,
              "expression-edit-dialog-visible": false,
              path: "workflows",
              "allow-new": "",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.$emit("update:modelValue", $event))
            }, null, 8, ["parameter", "model-value", "display-title"])
          ]),
          _: 1
        }, 8, ["label"])
      ]);
    };
  }
});
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "MetricsInput",
  props: {
    modelValue: {}
  },
  emits: ["update:modelValue", "deleteMetric"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const locale = useI18n();
    function addNewMetric() {
      emit("update:modelValue", [...props.modelValue, { name: "" }]);
    }
    function updateMetric(index, name2) {
      const newMetrics = [...props.modelValue];
      newMetrics[index].name = name2;
      emit("update:modelValue", newMetrics);
    }
    function onDeleteMetric(metric) {
      emit("deleteMetric", metric);
    }
    return (_ctx, _cache) => {
      const _component_N8nInput = resolveComponent("N8nInput");
      const _component_n8n_icon_button = resolveComponent("n8n-icon-button");
      const _component_n8n_button = resolveComponent("n8n-button");
      const _component_n8n_input_label = resolveComponent("n8n-input-label");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([_ctx.$style.metrics])
      }, [
        createVNode(_component_n8n_input_label, {
          label: unref(locale).baseText("testDefinition.edit.metricsFields"),
          bold: false,
          class: normalizeClass(_ctx.$style.metricField)
        }, {
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(_ctx.$style.metricsContainer)
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.modelValue, (metric, index) => {
                return openBlock(), createElementBlock("div", {
                  key: index,
                  class: normalizeClass(_ctx.$style.metricItem)
                }, [
                  createVNode(_component_N8nInput, {
                    ref_for: true,
                    ref: `metric_${index}`,
                    "data-test-id": "evaluation-metric-item",
                    "model-value": metric.name,
                    placeholder: unref(locale).baseText("testDefinition.edit.metricsPlaceholder"),
                    "onUpdate:modelValue": (value) => updateMetric(index, value)
                  }, null, 8, ["model-value", "placeholder", "onUpdate:modelValue"]),
                  createVNode(_component_n8n_icon_button, {
                    icon: "trash",
                    type: "text",
                    onClick: ($event) => onDeleteMetric(metric)
                  }, null, 8, ["onClick"])
                ], 2);
              }), 128)),
              createVNode(_component_n8n_button, {
                type: "tertiary",
                label: unref(locale).baseText("testDefinition.edit.metricsNew"),
                class: normalizeClass(_ctx.$style.newMetricButton),
                onClick: addNewMetric
              }, null, 8, ["label", "class"])
            ], 2)
          ]),
          _: 1
        }, 8, ["label", "class"])
      ], 2);
    };
  }
});
const metricsContainer = "_metricsContainer_1eaf8_123";
const metricItem = "_metricItem_1eaf8_129";
const metricField = "_metricField_1eaf8_134";
const metricsDivider = "_metricsDivider_1eaf8_139";
const newMetricButton = "_newMetricButton_1eaf8_144";
const style0$1 = {
  metricsContainer,
  metricItem,
  metricField,
  metricsDivider,
  newMetricButton
};
const cssModules$1 = {
  "$style": style0$1
};
const MetricsInput = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__cssModules", cssModules$1]]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "TestDefinitionEditView",
  props: {
    testId: {}
  },
  setup(__props) {
    const props = __props;
    const router = useRouter();
    const route = useRoute();
    const locale = useI18n();
    const { debounce } = useDebounce();
    const toast = useToast();
    const testDefinitionStore = useTestDefinitionStore();
    const tagsStore = useAnnotationTagsStore();
    const uiStore = useUIStore();
    const {
      state,
      fieldsIssues,
      isSaving,
      cancelEditing,
      loadTestData,
      createTest,
      updateTest,
      startEditing,
      saveChanges,
      handleKeydown,
      deleteMetric,
      updateMetrics
    } = useTestDefinitionForm();
    const isLoading = computed(() => tagsStore.isLoading);
    const allTags = computed(() => tagsStore.allTags);
    const tagsById = computed(() => tagsStore.tagsById);
    const testId = computed(() => props.testId ?? route.params.testId);
    const currentWorkflowId = computed(() => route.params.name);
    const appliedTheme = computed(() => uiStore.appliedTheme);
    const tagUsageCount = computed(
      () => tagsStore.tagsById[state.value.tags.value[0]]?.usageCount ?? 0
    );
    const hasRuns = computed(() => runs2.value.length > 0);
    const nodePinningModal = ref(null);
    const modalContentWidth = ref(0);
    const showConfig = ref(true);
    const selectedMetric = ref("");
    onMounted(async () => {
      if (!testDefinitionStore.isFeatureEnabled) {
        toast.showMessage({
          title: locale.baseText("testDefinition.notImplemented"),
          type: "warning"
        });
        void router.push({
          name: VIEWS.WORKFLOW,
          params: { name: router.currentRoute.value.params.name }
        });
        return;
      }
      void tagsStore.fetchAll({ withUsageCount: true });
      if (testId.value) {
        await loadTestData(testId.value);
      } else {
        await onSaveTest();
      }
    });
    async function onSaveTest() {
      try {
        let savedTest;
        if (testId.value) {
          savedTest = await updateTest(testId.value);
        } else {
          savedTest = await createTest(currentWorkflowId.value);
        }
        if (savedTest && route.name === VIEWS.NEW_TEST_DEFINITION) {
          await router.replace({
            name: VIEWS.TEST_DEFINITION_EDIT,
            params: { testId: savedTest.id }
          });
        }
      } catch (e) {
        toast.showError(e, locale.baseText("testDefinition.edit.testSaveFailed"));
      }
    }
    function hasIssues(key) {
      return fieldsIssues.value.some((issue) => issue.field === key);
    }
    async function onDeleteMetric(deletedMetric) {
      if (deletedMetric.id) {
        await deleteMetric(deletedMetric.id, testId.value);
      }
    }
    async function handleCreateTag(tagName) {
      try {
        const newTag = await tagsStore.create(tagName);
        return newTag;
      } catch (error) {
        toast.showError(error, "Error", error.message);
        throw error;
      }
    }
    async function openPinningModal() {
      uiStore.openModal(NODE_PINNING_MODAL_KEY);
    }
    async function runTest() {
      await testDefinitionStore.startTestRun(testId.value);
      await testDefinitionStore.fetchTestRuns(testId.value);
    }
    const runs2 = computed(
      () => Object.values(testDefinitionStore.testRunsById ?? {}).filter(
        (run) => run.testDefinitionId === testId.value
      )
    );
    async function onDeleteRuns(toDelete) {
      await Promise.all(
        toDelete.map(async (run) => {
          await testDefinitionStore.deleteTestRun({ testDefinitionId: testId.value, runId: run.id });
        })
      );
    }
    function toggleConfig() {
      showConfig.value = !showConfig.value;
    }
    watch(
      () => state.value.metrics,
      debounce(async () => await updateMetrics(testId.value), { debounceTime: 400 }),
      { deep: true }
    );
    watch(
      () => [
        state.value.description,
        state.value.name,
        state.value.tags,
        state.value.evaluationWorkflow,
        state.value.mockedNodes
      ],
      debounce(onSaveTest, { debounceTime: 400 }),
      { deep: true }
    );
    return (_ctx, _cache) => {
      const _component_n8n_button = resolveComponent("n8n-button");
      const _component_MetricsChart = __unplugin_components_0$2;
      const _component_BlockArrow = __unplugin_components_1;
      const _component_font_awesome_icon = resolveComponent("font-awesome-icon");
      const _component_N8nHeading = resolveComponent("N8nHeading");
      const _component_NodesPinning = __unplugin_components_2;
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([_ctx.$style.container, { [_ctx.$style.noRuns]: !hasRuns.value }])
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.headerSection)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(_ctx.$style.headerMeta)
          }, [
            createBaseVNode("div", {
              class: normalizeClass(_ctx.$style.name)
            }, [
              createVNode(EvaluationHeader, {
                modelValue: unref(state).name,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => unref(state).name = $event),
                class: normalizeClass({ "has-issues": hasIssues("name") }),
                "start-editing": unref(startEditing),
                "save-changes": unref(saveChanges),
                "handle-keydown": unref(handleKeydown)
              }, null, 8, ["modelValue", "class", "start-editing", "save-changes", "handle-keydown"]),
              createBaseVNode("div", {
                class: normalizeClass(_ctx.$style.lastSaved)
              }, [
                unref(isSaving) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  createTextVNode(toDisplayString(unref(locale).baseText("testDefinition.edit.saving")), 1)
                ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(unref(locale).baseText("testDefinition.edit.saved")), 1)
                ], 64))
              ], 2)
            ], 2),
            createVNode(DescriptionInput, {
              modelValue: unref(state).description,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => unref(state).description = $event),
              "start-editing": unref(startEditing),
              "save-changes": unref(saveChanges),
              "handle-keydown": unref(handleKeydown),
              class: normalizeClass(_ctx.$style.descriptionInput)
            }, null, 8, ["modelValue", "start-editing", "save-changes", "handle-keydown", "class"])
          ], 2),
          createBaseVNode("div", {
            class: normalizeClass(_ctx.$style.controls)
          }, [
            runs2.value.length > 0 ? (openBlock(), createBlock(_component_n8n_button, {
              key: 0,
              size: "small",
              icon: showConfig.value ? "eye-slash" : "eye",
              "data-test-id": "toggle-config-button",
              label: showConfig.value ? unref(locale).baseText("testDefinition.edit.hideConfig") : unref(locale).baseText("testDefinition.edit.showConfig"),
              type: "tertiary",
              onClick: toggleConfig
            }, null, 8, ["icon", "label"])) : createCommentVNode("", true),
            unref(state).evaluationWorkflow.value && unref(state).tags.value.length > 0 ? (openBlock(), createBlock(_component_n8n_button, {
              key: 1,
              class: normalizeClass(_ctx.$style.runTestButton),
              size: "small",
              "data-test-id": "run-test-button",
              label: unref(locale).baseText("testDefinition.runTest"),
              type: "primary",
              onClick: runTest
            }, null, 8, ["class", "label"])) : (openBlock(), createBlock(_component_n8n_button, {
              key: 2,
              class: normalizeClass(_ctx.$style.runTestButton),
              size: "small",
              "data-test-id": "run-test-button",
              label: unref(locale).baseText("testDefinition.edit.saveTest"),
              type: "primary",
              onClick: onSaveTest
            }, null, 8, ["class", "label"]))
          ], 2)
        ], 2),
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.content)
        }, [
          runs2.value.length > 0 ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(_ctx.$style.runs)
          }, [
            createVNode(_component_MetricsChart, {
              selectedMetric: selectedMetric.value,
              "onUpdate:selectedMetric": _cache[2] || (_cache[2] = ($event) => selectedMetric.value = $event),
              runs: runs2.value,
              theme: appliedTheme.value
            }, null, 8, ["selectedMetric", "runs", "theme"]),
            createVNode(TestRunsTable, {
              class: normalizeClass(_ctx.$style.runsTable),
              runs: runs2.value,
              selectable: true,
              "data-test-id": "past-runs-table",
              onDeleteRuns
            }, null, 8, ["class", "runs"])
          ], 2)) : createCommentVNode("", true),
          createBaseVNode("div", {
            class: normalizeClass([_ctx.$style.panelBlock, { [_ctx.$style.hidden]: !showConfig.value }])
          }, [
            createBaseVNode("div", {
              class: normalizeClass(_ctx.$style.panelIntro)
            }, toDisplayString(unref(locale).baseText("testDefinition.edit.step.intro")), 3),
            createVNode(_component_BlockArrow, {
              class: normalizeClass(_ctx.$style.introArrow)
            }, null, 8, ["class"]),
            createVNode(EvaluationStep, {
              class: normalizeClass(_ctx.$style.step),
              title: unref(locale).baseText("testDefinition.edit.step.executions", {
                adjustToNumber: tagUsageCount.value
              }),
              description: unref(locale).baseText("testDefinition.edit.step.executions.description")
            }, {
              icon: withCtx(() => [
                createVNode(_component_font_awesome_icon, {
                  icon: "history",
                  size: "lg"
                })
              ]),
              cardContent: withCtx(() => [
                createVNode(TagsInput, {
                  modelValue: unref(state).tags,
                  "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => unref(state).tags = $event),
                  class: normalizeClass({ "has-issues": hasIssues("tags") }),
                  "all-tags": allTags.value,
                  "tags-by-id": tagsById.value,
                  "is-loading": isLoading.value,
                  "start-editing": unref(startEditing),
                  "save-changes": unref(saveChanges),
                  "cancel-editing": unref(cancelEditing),
                  "create-tag": handleCreateTag
                }, null, 8, ["modelValue", "class", "all-tags", "tags-by-id", "is-loading", "start-editing", "save-changes", "cancel-editing"])
              ]),
              _: 1
            }, 8, ["class", "title", "description"]),
            createBaseVNode("div", {
              class: normalizeClass(_ctx.$style.evaluationArrows)
            }, [
              createVNode(_component_BlockArrow),
              createVNode(_component_BlockArrow)
            ], 2),
            createVNode(EvaluationStep, {
              class: normalizeClass(_ctx.$style.step),
              title: unref(locale).baseText("testDefinition.edit.step.mockedNodes", {
                adjustToNumber: unref(state).mockedNodes?.length ?? 0
              }),
              small: true,
              expanded: true,
              description: unref(locale).baseText("testDefinition.edit.step.nodes.description")
            }, {
              icon: withCtx(() => [
                createVNode(_component_font_awesome_icon, {
                  icon: "thumbtack",
                  size: "lg"
                })
              ]),
              cardContent: withCtx(() => [
                createVNode(_component_n8n_button, {
                  size: "small",
                  "data-test-id": "select-nodes-button",
                  label: unref(locale).baseText("testDefinition.edit.selectNodes"),
                  type: "tertiary",
                  onClick: openPinningModal
                }, null, 8, ["label"])
              ]),
              _: 1
            }, 8, ["class", "title", "description"]),
            createVNode(EvaluationStep, {
              class: normalizeClass(_ctx.$style.step),
              title: unref(locale).baseText("testDefinition.edit.step.reRunExecutions"),
              small: true,
              description: unref(locale).baseText("testDefinition.edit.step.reRunExecutions.description")
            }, {
              icon: withCtx(() => [
                createVNode(_component_font_awesome_icon, {
                  icon: "redo",
                  size: "lg"
                })
              ]),
              _: 1
            }, 8, ["class", "title", "description"]),
            createVNode(EvaluationStep, {
              class: normalizeClass(_ctx.$style.step),
              title: unref(locale).baseText("testDefinition.edit.step.compareExecutions"),
              description: unref(locale).baseText("testDefinition.edit.step.compareExecutions.description")
            }, {
              icon: withCtx(() => [
                createVNode(_component_font_awesome_icon, {
                  icon: "equals",
                  size: "lg"
                })
              ]),
              cardContent: withCtx(() => [
                createVNode(_sfc_main$2, {
                  modelValue: unref(state).evaluationWorkflow,
                  "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => unref(state).evaluationWorkflow = $event),
                  class: normalizeClass({ "has-issues": hasIssues("evaluationWorkflow") })
                }, null, 8, ["modelValue", "class"])
              ]),
              _: 1
            }, 8, ["class", "title", "description"]),
            createVNode(EvaluationStep, {
              class: normalizeClass(_ctx.$style.step),
              title: unref(locale).baseText("testDefinition.edit.step.metrics"),
              description: unref(locale).baseText("testDefinition.edit.step.metrics.description")
            }, {
              icon: withCtx(() => [
                createVNode(_component_font_awesome_icon, {
                  icon: "chart-bar",
                  size: "lg"
                })
              ]),
              cardContent: withCtx(() => [
                createVNode(MetricsInput, {
                  modelValue: unref(state).metrics,
                  "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => unref(state).metrics = $event),
                  class: normalizeClass({ "has-issues": hasIssues("metrics") }),
                  onDeleteMetric
                }, null, 8, ["modelValue", "class"])
              ]),
              _: 1
            }, 8, ["class", "title", "description"])
          ], 2)
        ], 2),
        createVNode(Modal, {
          ref_key: "nodePinningModal",
          ref: nodePinningModal,
          width: "80vw",
          height: "85vh",
          name: unref(NODE_PINNING_MODAL_KEY)
        }, {
          header: withCtx(() => [
            createVNode(_component_N8nHeading, {
              size: "large",
              bold: true,
              class: normalizeClass(_ctx.$style.runsTableHeading)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(locale).baseText("testDefinition.edit.selectNodes")), 1)
              ]),
              _: 1
            }, 8, ["class"])
          ]),
          content: withCtx(() => [
            createVNode(_component_NodesPinning, {
              modelValue: unref(state).mockedNodes,
              "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => unref(state).mockedNodes = $event),
              width: modalContentWidth.value,
              "data-test-id": "nodes-pinning-modal"
            }, null, 8, ["modelValue", "width"])
          ]),
          _: 1
        }, 8, ["name"])
      ], 2);
    };
  }
});
const container = "_container_y9ejv_123";
const content = "_content_y9ejv_141";
const noRuns = "_noRuns_y9ejv_146";
const headerSection = "_headerSection_y9ejv_151";
const headerMeta = "_headerMeta_y9ejv_159";
const name = "_name_y9ejv_163";
const lastSaved = "_lastSaved_y9ejv_167";
const descriptionInput = "_descriptionInput_y9ejv_172";
const runs = "_runs_y9ejv_176";
const panelBlock = "_panelBlock_y9ejv_190";
const hidden = "_hidden_y9ejv_200";
const panelIntro = "_panelIntro_y9ejv_210";
const step = "_step_y9ejv_218";
const introArrow = "_introArrow_y9ejv_225";
const evaluationArrows = "_evaluationArrows_y9ejv_231";
const controls = "_controls_y9ejv_242";
const style0 = {
  container,
  content,
  noRuns,
  headerSection,
  headerMeta,
  name,
  lastSaved,
  descriptionInput,
  runs,
  panelBlock,
  hidden,
  panelIntro,
  step,
  introArrow,
  evaluationArrows,
  controls
};
const cssModules = {
  "$style": style0
};
const TestDefinitionEditView = /* @__PURE__ */ _export_sfc(_sfc_main, [["__cssModules", cssModules]]);
export {
  TestDefinitionEditView as default
};
