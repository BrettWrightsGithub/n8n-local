import { d as defineComponent, m as resolveComponent, c as openBlock, h as createElementBlock, j as createBaseVNode, t as toDisplayString, l as unref, n as normalizeClass, i as createVNode, g as useI18n, _ as _export_sfc, q as computed, w as withCtx, k as createTextVNode, F as Fragment, fA as _sfc_main$4, f as createCommentVNode, A as renderList, e as createBlock, b1 as resolveDynamicComponent, aR as _sfc_main$5, I as withModifiers, b0 as mergeProps, b as useRouter, hE as useAnnotationTagsStore, hM as useTestDefinitionStore, r as ref, a as useToast, o as onMounted, V as VIEWS } from "./index-CWcTt6jd.js";
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "EmptyState",
  emits: ["create-test"],
  setup(__props) {
    const locale = useI18n();
    return (_ctx, _cache) => {
      const _component_n8n_action_box = resolveComponent("n8n-action-box");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.container)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.header)
        }, [
          createBaseVNode("h1", null, toDisplayString(unref(locale).baseText("testDefinition.list.tests")), 1)
        ], 2),
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.content)
        }, [
          createVNode(_component_n8n_action_box, {
            class: normalizeClass(_ctx.$style.actionBox),
            heading: unref(locale).baseText("testDefinition.list.evaluations"),
            description: unref(locale).baseText("testDefinition.list.actionDescription"),
            "button-text": unref(locale).baseText("testDefinition.list.actionButton"),
            "onClick:button": _cache[0] || (_cache[0] = ($event) => _ctx.$emit("create-test"))
          }, null, 8, ["class", "heading", "description", "button-text"]),
          createVNode(_component_n8n_action_box, {
            class: normalizeClass(_ctx.$style.actionBox),
            heading: unref(locale).baseText("testDefinition.list.unitTests.title"),
            description: unref(locale).baseText("testDefinition.list.unitTests.description"),
            "button-text": unref(locale).baseText("testDefinition.list.unitTests.cta"),
            "button-type": "tertiary"
          }, null, 8, ["class", "heading", "description", "button-text"])
        ], 2)
      ], 2);
    };
  }
});
const container$1 = "_container_8wqbe_123";
const header = "_header_8wqbe_127";
const content = "_content_8wqbe_139";
const actionBox = "_actionBox_8wqbe_145";
const style0$3 = {
  container: container$1,
  header,
  content,
  actionBox
};
const cssModules$3 = {
  "$style": style0$3
};
const EmptyState = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__cssModules", cssModules$3]]);
const _hoisted_1 = ["data-test-id"];
const _hoisted_2 = { key: 1 };
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "TestItem",
  props: {
    test: {}
  },
  emits: ["run-test", "view-details", "edit-test", "delete-test", "cancel-test-run"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const locale = useI18n();
    const emit = __emit;
    const actions2 = [
      {
        icon: "play",
        id: "run",
        event: () => emit("run-test", props.test.id),
        tooltip: locale.baseText("testDefinition.runTest"),
        show: () => props.test.execution.status !== "running"
      },
      {
        icon: "stop",
        id: "cancel",
        event: () => emit("cancel-test-run", props.test.id, props.test.execution.id),
        tooltip: locale.baseText("testDefinition.cancelTestRun"),
        show: () => props.test.execution.status === "running"
      },
      {
        icon: "list",
        id: "view",
        event: () => emit("view-details", props.test.id),
        tooltip: locale.baseText("testDefinition.viewDetails")
      },
      {
        icon: "pen",
        id: "edit",
        event: () => emit("edit-test", props.test.id),
        tooltip: locale.baseText("testDefinition.editTest")
      },
      {
        icon: "trash",
        id: "delete",
        event: () => emit("delete-test", props.test.id),
        tooltip: locale.baseText("testDefinition.deleteTest")
      }
    ];
    const visibleActions = computed(() => actions2.filter((action) => action.show?.() ?? true));
    return (_ctx, _cache) => {
      const _component_n8n_text = resolveComponent("n8n-text");
      const _component_n8n_spinner = resolveComponent("n8n-spinner");
      const _component_n8n_tooltip = resolveComponent("n8n-tooltip");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.testItem),
        "data-test-id": `test-item-${_ctx.test.id}`,
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("view-details", _ctx.test.id))
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.testInfo)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(_ctx.$style.testName)
          }, toDisplayString(_ctx.test.name), 3),
          createBaseVNode("div", {
            class: normalizeClass(_ctx.$style.testCases)
          }, [
            createVNode(_component_n8n_text, { size: "small" }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(locale).baseText("testDefinition.list.testRuns", { adjustToNumber: _ctx.test.testCases })), 1)
              ]),
              _: 1
            }),
            _ctx.test.execution.status === "running" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createTextVNode(toDisplayString(unref(locale).baseText("testDefinition.list.running")) + " ", 1),
              createVNode(_component_n8n_spinner)
            ], 64)) : _ctx.test.execution.lastRun ? (openBlock(), createElementBlock("span", _hoisted_2, [
              createTextVNode(toDisplayString(unref(locale).baseText("testDefinition.list.lastRun")) + " ", 1),
              createVNode(_sfc_main$4, {
                date: _ctx.test.execution.lastRun
              }, null, 8, ["date"])
            ])) : createCommentVNode("", true)
          ], 2)
        ], 2),
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.metrics)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(_ctx.$style.metric)
          }, toDisplayString(unref(locale).baseText("testDefinition.list.errorRate", {
            interpolate: { errorRate: _ctx.test.execution.errorRate ?? "-" }
          })), 3),
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.test.execution.metrics, (value, key) => {
            return openBlock(), createElementBlock("div", {
              key,
              class: normalizeClass(_ctx.$style.metric)
            }, toDisplayString(key) + ": " + toDisplayString(value.toFixed(2) ?? "-"), 3);
          }), 128))
        ], 2),
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.actions)
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(visibleActions.value, (action) => {
            return openBlock(), createBlock(_component_n8n_tooltip, {
              key: action.icon,
              placement: "top",
              "show-after": 1e3
            }, {
              content: withCtx(() => [
                createTextVNode(toDisplayString(action.tooltip), 1)
              ]),
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(unref(_sfc_main$5)), {
                  icon: action.icon,
                  "data-test-id": `${action.id}-test-button-${_ctx.test.id}`,
                  type: "tertiary",
                  size: "mini",
                  onClick: withModifiers(action.event, ["stop"])
                }, null, 8, ["icon", "data-test-id", "onClick"]))
              ]),
              _: 2
            }, 1024);
          }), 128))
        ], 2)
      ], 10, _hoisted_1);
    };
  }
});
const testItem = "_testItem_ahqp7_123";
const testInfo = "_testInfo_ahqp7_136";
const testName = "_testName_ahqp7_142";
const testCases = "_testCases_ahqp7_150";
const metrics = "_metrics_ahqp7_158";
const metric = "_metric_ahqp7_158";
const actions = "_actions_ahqp7_170";
const style0$2 = {
  testItem,
  testInfo,
  testName,
  testCases,
  metrics,
  metric,
  actions
};
const cssModules$2 = {
  "$style": style0$2
};
const TestItem = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__cssModules", cssModules$2]]);
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "TestsList",
  props: {
    tests: {}
  },
  emits: ["create-test"],
  setup(__props) {
    const locale = useI18n();
    return (_ctx, _cache) => {
      const _component_n8n_button = resolveComponent("n8n-button");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.testsList),
        "data-test-id": "test-definition-list"
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.testsHeader)
        }, [
          createVNode(_component_n8n_button, {
            label: unref(locale).baseText("testDefinition.list.createNew"),
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("create-test"))
          }, null, 8, ["label"])
        ], 2),
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.tests, (test) => {
          return openBlock(), createBlock(TestItem, mergeProps({
            key: test.id,
            test,
            ref_for: true
          }, _ctx.$attrs), null, 16, ["test"]);
        }), 128))
      ], 2);
    };
  }
});
const testsList = "_testsList_128kj_123";
const testsHeader = "_testsHeader_128kj_129";
const style0$1 = {
  testsList,
  testsHeader
};
const cssModules$1 = {
  "$style": style0$1
};
const TestsList = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__cssModules", cssModules$1]]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "TestDefinitionListView",
  setup(__props) {
    const router = useRouter();
    const tagsStore = useAnnotationTagsStore();
    const testDefinitionStore = useTestDefinitionStore();
    const isLoading = ref(false);
    const toast = useToast();
    const locale = useI18n();
    const tests = computed(() => {
      return (testDefinitionStore.allTestDefinitionsByWorkflowId[router.currentRoute.value.params.name] ?? []).filter((test) => test.id !== void 0).sort((a, b) => new Date(b?.updatedAt ?? "").getTime() - new Date(a?.updatedAt ?? "").getTime()).map((test) => ({
        id: test.id,
        name: test.name ?? "",
        tagName: test.annotationTagId ? getTagName(test.annotationTagId) : "",
        testCases: testDefinitionStore.testRunsByTestId[test.id]?.length ?? 0,
        execution: getTestExecution(test.id)
      }));
    });
    const hasTests = computed(() => tests.value.length > 0);
    const allTags = computed(() => tagsStore.allTags);
    function getTagName(tagId) {
      const matchingTag = allTags.value.find((t) => t.id === tagId);
      return matchingTag?.name ?? "";
    }
    function getTestExecution(testId) {
      const lastRun = testDefinitionStore.lastRunByTestId[testId];
      if (!lastRun) {
        return {
          id: null,
          lastRun: null,
          errorRate: 0,
          metrics: {},
          status: "new"
        };
      }
      const mockExecutions = {
        id: lastRun.id,
        lastRun: lastRun.updatedAt ?? "",
        errorRate: 0,
        metrics: lastRun.metrics ?? {},
        status: lastRun.status ?? "running"
      };
      return mockExecutions;
    }
    function onCreateTest() {
      void router.push({ name: VIEWS.NEW_TEST_DEFINITION });
    }
    async function onRunTest(testId) {
      try {
        const result = await testDefinitionStore.startTestRun(testId);
        if (result.success) {
          toast.showMessage({
            title: locale.baseText("testDefinition.list.testStarted"),
            type: "success"
          });
          await testDefinitionStore.fetchTestRuns(testId);
        } else {
          throw new Error("Test run failed to start");
        }
      } catch (error) {
        toast.showError(error, locale.baseText("testDefinition.list.testStartError"));
      }
    }
    async function onCancelTestRun(testId, testRunId) {
      try {
        if (!testRunId) {
          throw new Error("Failed to cancel test run");
        }
        const result = await testDefinitionStore.cancelTestRun(testId, testRunId);
        if (result.success) {
          toast.showMessage({
            title: locale.baseText("testDefinition.list.testCancelled"),
            type: "success"
          });
          await testDefinitionStore.fetchTestRuns(testId);
        } else {
          throw new Error("Failed to cancel test run");
        }
      } catch (error) {
        toast.showError(error, locale.baseText("testDefinition.list.testStartError"));
      }
    }
    async function onViewDetails(testId) {
      void router.push({ name: VIEWS.TEST_DEFINITION_RUNS, params: { testId } });
    }
    function onEditTest(testId) {
      void router.push({ name: VIEWS.TEST_DEFINITION_EDIT, params: { testId } });
    }
    async function onDeleteTest(testId) {
      await testDefinitionStore.deleteById(testId);
      toast.showMessage({
        title: locale.baseText("testDefinition.list.testDeleted"),
        type: "success"
      });
    }
    async function loadInitialData() {
      if (!isLoading.value) {
        isLoading.value = true;
        try {
          await Promise.all([
            tagsStore.fetchAll(),
            testDefinitionStore.fetchAll({
              workflowId: router.currentRoute.value.params.name
            })
          ]);
          isLoading.value = false;
        } catch (error) {
          toast.showError(error, locale.baseText("testDefinition.list.loadError"));
        } finally {
          isLoading.value = false;
        }
      }
    }
    onMounted(() => {
      if (!testDefinitionStore.isFeatureEnabled) {
        toast.showMessage({
          title: locale.baseText("testDefinition.notImplemented"),
          type: "warning"
        });
        void router.push({
          name: VIEWS.WORKFLOW,
          params: { name: router.currentRoute.value.params.name }
        });
        return;
      }
      void loadInitialData();
    });
    return (_ctx, _cache) => {
      const _component_n8n_loading = resolveComponent("n8n-loading");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.container)
      }, [
        isLoading.value ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.$style.loading)
        }, [
          createVNode(_component_n8n_loading, {
            loading: true,
            rows: 3
          })
        ], 2)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          !hasTests.value ? (openBlock(), createBlock(EmptyState, {
            key: 0,
            "data-test-id": "test-definition-empty-state",
            onCreateTest
          })) : (openBlock(), createBlock(TestsList, {
            key: 1,
            tests: tests.value,
            onCreateTest,
            onRunTest,
            onViewDetails,
            onEditTest,
            onDeleteTest,
            onCancelTestRun
          }, null, 8, ["tests"]))
        ], 64))
      ], 2);
    };
  }
});
const container = "_container_12eu3_123";
const loading = "_loading_12eu3_130";
const style0 = {
  container,
  loading
};
const cssModules = {
  "$style": style0
};
const TestDefinitionListView = /* @__PURE__ */ _export_sfc(_sfc_main, [["__cssModules", cssModules]]);
export {
  TestDefinitionListView as default
};
