import type { Document } from '@langchain/core/documents';
import type { Embeddings } from '@langchain/core/embeddings';
import type { VectorStore } from '@langchain/core/vectorstores';
import type { IExecuteFunctions, INodeCredentialDescription, INodeProperties, INodeExecutionData, INodeTypeDescription, SupplyData, ISupplyDataFunctions, ILoadOptionsFunctions, INodeListSearchResult, Icon, ThemeIconColor } from 'n8n-workflow';
type NodeOperationMode = 'insert' | 'load' | 'retrieve' | 'update' | 'retrieve-as-tool';
interface NodeMeta {
    displayName: string;
    name: string;
    description: string;
    docsUrl: string;
    icon: Icon;
    iconColor?: ThemeIconColor;
    credentials?: INodeCredentialDescription[];
    operationModes?: NodeOperationMode[];
}
export interface VectorStoreNodeConstructorArgs {
    meta: NodeMeta;
    methods?: {
        listSearch?: {
            [key: string]: (this: ILoadOptionsFunctions, filter?: string, paginationToken?: string) => Promise<INodeListSearchResult>;
        };
    };
    sharedFields: INodeProperties[];
    insertFields?: INodeProperties[];
    loadFields?: INodeProperties[];
    retrieveFields?: INodeProperties[];
    updateFields?: INodeProperties[];
    populateVectorStore: (context: ISupplyDataFunctions, embeddings: Embeddings, documents: Array<Document<Record<string, unknown>>>, itemIndex: number) => Promise<void>;
    getVectorStoreClient: (context: ISupplyDataFunctions, filter: Record<string, never> | undefined, embeddings: Embeddings, itemIndex: number) => Promise<VectorStore>;
}
export declare const createVectorStoreNode: (args: VectorStoreNodeConstructorArgs) => {
    new (): {
        description: INodeTypeDescription;
        methods: {
            listSearch?: {
                [key: string]: (this: ILoadOptionsFunctions, filter?: string, paginationToken?: string) => Promise<INodeListSearchResult>;
            };
        } | undefined;
        execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]>;
        supplyData(this: ISupplyDataFunctions, itemIndex: number): Promise<SupplyData>;
    };
};
export {};
